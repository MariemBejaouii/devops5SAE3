pipeline {
    agent any

    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "172.31.40.209:8081"
        NEXUS_REPOSITORY = "vprofile-release"
        NEXUS_REPO_ID = "vprofile-release"
        NEXUS_CREDENTIAL_ID = "nexuslogin"
        ARTVERSION = "${env.BUILD_ID}"
    }

    stages {
        stage('Checkout from Git') {
            steps {
                script {
                    git branch: 'main', url: 'https://github.com/MariemBejaouii/devops5SAE3.git'
                }
            }
        }

        stage('Clone the Project from Git') {
            steps {
                script {
                    sh 'rm -rf *'
                    sh 'git clone https://github.com/MariemBejaouii/devops5SAE3.git'
                }
            }
        }

        stage('Clean the Project') {
            steps {
                script {
                    dir('devops5SAE3/DevOps_Project') {
                        sh 'mvn clean'
                    }
                }
            }
        }

        stage('Build with Maven') {
            steps {
                script {
                    dir('devops5SAE3/DevOps_Project') {
                        sh 'mvn clean install'
                    }
                }
            }
        }

        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    def pomContent = readFile("${WORKSPACE}/devops5SAE3/DevOps_Project/pom.xml").trim()
                    def pom = new XmlSlurper().parseText(pomContent)

                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                    artifactPath = filesByGlob[0].path
                    artifactExists = fileExists artifactPath

                    if (artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version} ARTVERSION"
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: ARTVERSION,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                    classifier: '',
                                    file: artifactPath,
                                    type: pom.packaging],
                                [artifactId: pom.artifactId,
                                    classifier: '',
                                    file: "pom.xml",
                                    type: "pom"]
                            ]
                        )
                    } else {
                        error "*** File: ${artifactPath}, could not be found"
                    }
                }
            }
        }

        stage('Run junit and mockito test') {
            steps {
                script {
                    sh 'pwd'
                    sh 'ls'
                    sh 'mvn test'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Ajouter l'utilisateur Jenkins au groupe docker
                    sh 'sudo usermod -aG docker jenkins'
                    sleep 30

                    // Construire l'image Docker Ã  partir du Dockerfile
                    dir('devops5SAE3/DevOps_Project') {
                        sh 'mvn clean install'
                        sh 'sudo -E docker build -t mariembejaoui/devops_project -f Dockerfile .'
                    }
                    sh 'mvn test'
                }
            }
        }

        stage('SonarQube analysis') {
            steps {
                // Analyse du code avec SonarQube
                withSonarQubeEnv('sonarqube-10.2.1') {
                    sh 'mvn sonar:sonar'
                }
            }
        }
    }
}
